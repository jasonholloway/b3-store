// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.woodpigeon.b3.schema.v100



@SerialVersionUID(0L)
final case class Command(
    id: String = "",
    updateType: com.woodpigeon.b3.schema.v100.Command.UpdateType = com.woodpigeon.b3.schema.v100.Command.UpdateType.Empty
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Command] with com.trueaccord.lenses.Updatable[Command] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (id != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, id) }
      if (updateType.putProduct.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(updateType.putProduct.get.serializedSize) + updateType.putProduct.get.serializedSize }
      if (updateType.deleteProduct.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(updateType.deleteProduct.get.serializedSize) + updateType.deleteProduct.get.serializedSize }
      if (updateType.putStock.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(updateType.putStock.get.serializedSize) + updateType.putStock.get.serializedSize }
      if (updateType.putImage.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(updateType.putImage.get.serializedSize) + updateType.putImage.get.serializedSize }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = id
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      updateType.putProduct.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      updateType.deleteProduct.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      updateType.putStock.foreach { __v =>
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      updateType.putImage.foreach { __v =>
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.woodpigeon.b3.schema.v100.Command = {
      var __id = this.id
      var __updateType = this.updateType
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __id = _input__.readString()
          case 18 =>
            __updateType = com.woodpigeon.b3.schema.v100.Command.UpdateType.PutProduct(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, updateType.putProduct.getOrElse(com.woodpigeon.b3.schema.v100.PutProduct.defaultInstance)))
          case 26 =>
            __updateType = com.woodpigeon.b3.schema.v100.Command.UpdateType.DeleteProduct(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, updateType.deleteProduct.getOrElse(com.woodpigeon.b3.schema.v100.DeleteProduct.defaultInstance)))
          case 34 =>
            __updateType = com.woodpigeon.b3.schema.v100.Command.UpdateType.PutStock(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, updateType.putStock.getOrElse(com.woodpigeon.b3.schema.v100.PutStock.defaultInstance)))
          case 42 =>
            __updateType = com.woodpigeon.b3.schema.v100.Command.UpdateType.PutImage(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, updateType.putImage.getOrElse(com.woodpigeon.b3.schema.v100.PutImage.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      com.woodpigeon.b3.schema.v100.Command(
          id = __id,
          updateType = __updateType
      )
    }
    def withId(__v: String): Command = copy(id = __v)
    def getPutProduct: com.woodpigeon.b3.schema.v100.PutProduct = updateType.putProduct.getOrElse(com.woodpigeon.b3.schema.v100.PutProduct.defaultInstance)
    def withPutProduct(__v: com.woodpigeon.b3.schema.v100.PutProduct): Command = copy(updateType = com.woodpigeon.b3.schema.v100.Command.UpdateType.PutProduct(__v))
    def getDeleteProduct: com.woodpigeon.b3.schema.v100.DeleteProduct = updateType.deleteProduct.getOrElse(com.woodpigeon.b3.schema.v100.DeleteProduct.defaultInstance)
    def withDeleteProduct(__v: com.woodpigeon.b3.schema.v100.DeleteProduct): Command = copy(updateType = com.woodpigeon.b3.schema.v100.Command.UpdateType.DeleteProduct(__v))
    def getPutStock: com.woodpigeon.b3.schema.v100.PutStock = updateType.putStock.getOrElse(com.woodpigeon.b3.schema.v100.PutStock.defaultInstance)
    def withPutStock(__v: com.woodpigeon.b3.schema.v100.PutStock): Command = copy(updateType = com.woodpigeon.b3.schema.v100.Command.UpdateType.PutStock(__v))
    def getPutImage: com.woodpigeon.b3.schema.v100.PutImage = updateType.putImage.getOrElse(com.woodpigeon.b3.schema.v100.PutImage.defaultInstance)
    def withPutImage(__v: com.woodpigeon.b3.schema.v100.PutImage): Command = copy(updateType = com.woodpigeon.b3.schema.v100.Command.UpdateType.PutImage(__v))
    def clearUpdateType: Command = copy(updateType = com.woodpigeon.b3.schema.v100.Command.UpdateType.Empty)
    def withUpdateType(__v: com.woodpigeon.b3.schema.v100.Command.UpdateType): Command = copy(updateType = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = id
          if (__t != "") __t else null
        }
        case 2 => updateType.putProduct.orNull
        case 3 => updateType.deleteProduct.orNull
        case 4 => updateType.putStock.orNull
        case 5 => updateType.putImage.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(id)
        case 2 => updateType.putProduct.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => updateType.deleteProduct.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => updateType.putStock.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => updateType.putImage.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.woodpigeon.b3.schema.v100.Command
}

object Command extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.woodpigeon.b3.schema.v100.Command] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.woodpigeon.b3.schema.v100.Command] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.woodpigeon.b3.schema.v100.Command = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.woodpigeon.b3.schema.v100.Command(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[String],
      updateType = __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[com.woodpigeon.b3.schema.v100.PutProduct]].map(com.woodpigeon.b3.schema.v100.Command.UpdateType.PutProduct)
    .orElse[com.woodpigeon.b3.schema.v100.Command.UpdateType](__fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[com.woodpigeon.b3.schema.v100.DeleteProduct]].map(com.woodpigeon.b3.schema.v100.Command.UpdateType.DeleteProduct))
    .orElse[com.woodpigeon.b3.schema.v100.Command.UpdateType](__fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[com.woodpigeon.b3.schema.v100.PutStock]].map(com.woodpigeon.b3.schema.v100.Command.UpdateType.PutStock))
    .orElse[com.woodpigeon.b3.schema.v100.Command.UpdateType](__fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[com.woodpigeon.b3.schema.v100.PutImage]].map(com.woodpigeon.b3.schema.v100.Command.UpdateType.PutImage))
    .getOrElse(com.woodpigeon.b3.schema.v100.Command.UpdateType.Empty)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.woodpigeon.b3.schema.v100.Command] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.woodpigeon.b3.schema.v100.Command(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[String]).getOrElse(""),
        updateType = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[com.woodpigeon.b3.schema.v100.PutProduct]]).map(com.woodpigeon.b3.schema.v100.Command.UpdateType.PutProduct)
    .orElse[com.woodpigeon.b3.schema.v100.Command.UpdateType](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[com.woodpigeon.b3.schema.v100.DeleteProduct]]).map(com.woodpigeon.b3.schema.v100.Command.UpdateType.DeleteProduct))
    .orElse[com.woodpigeon.b3.schema.v100.Command.UpdateType](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[com.woodpigeon.b3.schema.v100.PutStock]]).map(com.woodpigeon.b3.schema.v100.Command.UpdateType.PutStock))
    .orElse[com.woodpigeon.b3.schema.v100.Command.UpdateType](__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[com.woodpigeon.b3.schema.v100.PutImage]]).map(com.woodpigeon.b3.schema.v100.Command.UpdateType.PutImage))
    .getOrElse(com.woodpigeon.b3.schema.v100.Command.UpdateType.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = V100Proto.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = V100Proto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = com.woodpigeon.b3.schema.v100.PutProduct
      case 3 => __out = com.woodpigeon.b3.schema.v100.DeleteProduct
      case 4 => __out = com.woodpigeon.b3.schema.v100.PutStock
      case 5 => __out = com.woodpigeon.b3.schema.v100.PutImage
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.woodpigeon.b3.schema.v100.Command(
  )
  sealed trait UpdateType extends _root_.com.trueaccord.scalapb.GeneratedOneof {
    def isEmpty: Boolean = false
    def isDefined: Boolean = true
    def isPutProduct: Boolean = false
    def isDeleteProduct: Boolean = false
    def isPutStock: Boolean = false
    def isPutImage: Boolean = false
    def putProduct: scala.Option[com.woodpigeon.b3.schema.v100.PutProduct] = None
    def deleteProduct: scala.Option[com.woodpigeon.b3.schema.v100.DeleteProduct] = None
    def putStock: scala.Option[com.woodpigeon.b3.schema.v100.PutStock] = None
    def putImage: scala.Option[com.woodpigeon.b3.schema.v100.PutImage] = None
  }
  object UpdateType extends {
    @SerialVersionUID(0L)
    case object Empty extends com.woodpigeon.b3.schema.v100.Command.UpdateType {
      override def isEmpty: Boolean = true
      override def isDefined: Boolean = false
      override def number: Int = 0
      override def value: scala.Any = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    case class PutProduct(value: com.woodpigeon.b3.schema.v100.PutProduct) extends com.woodpigeon.b3.schema.v100.Command.UpdateType {
      override def isPutProduct: Boolean = true
      override def putProduct: scala.Option[com.woodpigeon.b3.schema.v100.PutProduct] = Some(value)
      override def number: Int = 2
    }
    @SerialVersionUID(0L)
    case class DeleteProduct(value: com.woodpigeon.b3.schema.v100.DeleteProduct) extends com.woodpigeon.b3.schema.v100.Command.UpdateType {
      override def isDeleteProduct: Boolean = true
      override def deleteProduct: scala.Option[com.woodpigeon.b3.schema.v100.DeleteProduct] = Some(value)
      override def number: Int = 3
    }
    @SerialVersionUID(0L)
    case class PutStock(value: com.woodpigeon.b3.schema.v100.PutStock) extends com.woodpigeon.b3.schema.v100.Command.UpdateType {
      override def isPutStock: Boolean = true
      override def putStock: scala.Option[com.woodpigeon.b3.schema.v100.PutStock] = Some(value)
      override def number: Int = 4
    }
    @SerialVersionUID(0L)
    case class PutImage(value: com.woodpigeon.b3.schema.v100.PutImage) extends com.woodpigeon.b3.schema.v100.Command.UpdateType {
      override def isPutImage: Boolean = true
      override def putImage: scala.Option[com.woodpigeon.b3.schema.v100.PutImage] = Some(value)
      override def number: Int = 5
    }
  }
  implicit class CommandLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.woodpigeon.b3.schema.v100.Command]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.woodpigeon.b3.schema.v100.Command](_l) {
    def id: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def putProduct: _root_.com.trueaccord.lenses.Lens[UpperPB, com.woodpigeon.b3.schema.v100.PutProduct] = field(_.getPutProduct)((c_, f_) => c_.copy(updateType = com.woodpigeon.b3.schema.v100.Command.UpdateType.PutProduct(f_)))
    def deleteProduct: _root_.com.trueaccord.lenses.Lens[UpperPB, com.woodpigeon.b3.schema.v100.DeleteProduct] = field(_.getDeleteProduct)((c_, f_) => c_.copy(updateType = com.woodpigeon.b3.schema.v100.Command.UpdateType.DeleteProduct(f_)))
    def putStock: _root_.com.trueaccord.lenses.Lens[UpperPB, com.woodpigeon.b3.schema.v100.PutStock] = field(_.getPutStock)((c_, f_) => c_.copy(updateType = com.woodpigeon.b3.schema.v100.Command.UpdateType.PutStock(f_)))
    def putImage: _root_.com.trueaccord.lenses.Lens[UpperPB, com.woodpigeon.b3.schema.v100.PutImage] = field(_.getPutImage)((c_, f_) => c_.copy(updateType = com.woodpigeon.b3.schema.v100.Command.UpdateType.PutImage(f_)))
    def updateType: _root_.com.trueaccord.lenses.Lens[UpperPB, com.woodpigeon.b3.schema.v100.Command.UpdateType] = field(_.updateType)((c_, f_) => c_.copy(updateType = f_))
  }
  final val ID_FIELD_NUMBER = 1
  final val PUTPRODUCT_FIELD_NUMBER = 2
  final val DELETEPRODUCT_FIELD_NUMBER = 3
  final val PUTSTOCK_FIELD_NUMBER = 4
  final val PUTIMAGE_FIELD_NUMBER = 5
}
